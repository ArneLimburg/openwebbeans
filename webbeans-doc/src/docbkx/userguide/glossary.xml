<?xml version="1.0" encoding="UTF-8"?>
    <!--
        Licensed to the Apache Software Foundation (ASF) under one or more
        contributor license agreements. See the NOTICE file distributed with
        this work for additional information regarding copyright ownership. The
        ASF licenses this file to you under the Apache License, Version 2.0 (the
        "License"); you may not use this file except in compliance with the
        License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable
        law or agreed to in writing, software distributed under the License is
        distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        KIND, either express or implied. See the License for the specific
        language governing permissions and limitations under the License.
    -->
<!DOCTYPE glossary PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" 
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"[
    
    <!ENTITY % entities SYSTEM "../entities.ent" >
    %entities;
]>

<glossary id="chapter.glossary">
	<title>Glossary</title>
	<para>This is the glossary of the &productname;</para>

	<!-- ********************************************************************* -->
	<!--                           E                                           -->
	<!-- ********************************************************************* -->
	<glossdiv id="glossary.e">
		<title>E</title>
		<glossentry id="glossary.ejb">
			<glossterm>Enterprise JavaBeans</glossterm>
			<glossdef>
				<para>
	Enterprise JavaBeansâ„¢ (EJB) is a managed, server-side component
	architecture for modular construction of enterprise applications.
				</para>
			</glossdef>
		</glossentry>
	</glossdiv>
	
	<!-- ********************************************************************* -->
	<!--                           O                                           -->
	<!-- ********************************************************************* -->
	<glossdiv id="glossary.o">
		<title>O</title>
		<glossentry id="glossary.OpenEJB">
			<glossterm>Apache OpenEJB</glossterm>
			<glossdef>
				<para>
	OpenEJB is an open source, embeddable and lightweight EJB Container
	System and EJB Server, released under the Apache 2.0 License. OpenEJB
	has been integrated with J2EE application servers such as Geronimo[1],
	and WebObjects[2].

	The role of OpenEJB is to create a runtime environment to run EJBs and let
	others access them in a unified way. Regardless of which application
	wants to access the beans, they all do it the same way, by accessing
	the appropriate Java Naming and Directory Interface (JNDI) context and
	looking up a home object. Think about JNDI as a catalog of names with
	objects bound to them. JNDI Initial Context is the starting point when
	working with the catalog--looking up a name or accessing the object
	bound to it. OpenEJB can run in two modes: Local (AKA IntraVM) Server
	and Remote Server.

	Apache OpenEJB 3.0, released in April 2008, adds OSGi support.
				</para>
			</glossdef>
		</glossentry>
	</glossdiv>
	
	<!-- ********************************************************************* -->
	<!--                           S                                           -->
	<!-- ********************************************************************* -->
	<glossdiv id="glossary.s">
		<title>S</title>
		<glossentry id="glossary.slsb">
			<glossterm>Stateless Session Bean</glossterm>
			<glossdef>
				<para>
	Stateless Session Beans are distributed objects that do not have state
	associated with them thus allowing concurrent access to the bean. The
	contents of instance variables are not guaranteed to be preserved
	across method calls. The lack of overhead to maintain a conversation
	with the calling program makes them less resource-intensive than
	stateful beans.
				</para>
			</glossdef>
		</glossentry>
		<glossentry id="glossary.sfsb">
			<glossterm>Stateful Session Bean</glossterm>
			<glossdef>
				<para>
	Stateful Session Beans are distributed objects having state: that is,
	they keep track of which calling program they are dealing with
	throughout a session. For example, checking out in a web store might be
	handled by a stateful session bean, which would use its state to keep
	track of where the customer is in the checkout process. On the other
	hand, sending an e-mail to customer support might be handled by a
	stateless bean, since this is a one-off operation and not part of a
	multi-step process. Stateful session beans' state may be persisted, but
	access to the bean instance is limited to only one client.
				</para>
			</glossdef>
		</glossentry>
	</glossdiv>

	<!-- ********************************************************************* -->
	<!--                           T                                           -->
	<!-- ********************************************************************* -->
	<glossdiv id="glossary.t">
		<title>T</title>
		<glossentry id="glossary.tapestry">
			<glossterm>Apache Tapestry</glossterm>
			<glossdef>
				<para>
	The presentation in the Apache Tapestry web site is:
	[...]
	Tapestry is an open-source framework for creating dynamic, robust, highly
	scalable web applications in Java. Tapestry complements and builds upon
	the standard Java Servlet API, and so it works in any servlet container
	or application server.
	[...]
				</para>
			</glossdef>
		</glossentry>
	</glossdiv>
	
</glossary>
